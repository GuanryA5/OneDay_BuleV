name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  # GitHub Actions 兼容配置 (Windows + Git Bash + Conda)
  PYTHON_VERSION: '3.12.3'  # GitHub Actions Windows 2022 支持的版本
  CACHE_VERSION: 'v3'
  CONDA_ENV: 'bluev-dev'

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # 快速检查 - Windows 环境 (GitHub Actions 兼容)
  quick-check:
    name: Quick Check (Python 3.12.3 - Windows)
    runs-on: windows-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Miniconda
        uses: conda-incubator/setup-miniconda@v3
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          environment-file: environment.yml
          activate-environment: ${{ env.CONDA_ENV }}
          auto-activate-base: false

      - name: Cache Conda dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/conda_pkgs_dir
            ~/.cache/pip
          key: ${{ runner.os }}-conda-${{ env.CACHE_VERSION }}-${{ hashFiles('environment.yml', '**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-conda-${{ env.CACHE_VERSION }}-
            ${{ runner.os }}-conda-

      - name: Install Python dependencies
        shell: bash -l {0}
        run: |
          conda activate ${{ env.CONDA_ENV }}
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Verify environment
        shell: bash -l {0}
        run: |
          conda activate ${{ env.CONDA_ENV }}
          echo "🔍 环境验证 (Windows + Conda)"
          python --version
          conda --version
          python -c "import PySide6; print(f'PySide6: {PySide6.__version__}')"
          python -c "import cv2; print(f'OpenCV: {cv2.__version__}')"
          python -c "import numpy; print(f'NumPy: {numpy.__version__}')"
          python -c "import pyautogui; print(f'PyAutoGUI: {pyautogui.__version__}')"

      - name: Run Ruff linting
        shell: bash -l {0}
        run: |
          conda activate ${{ env.CONDA_ENV }}
          echo "🔍 代码检查 (Ruff)"
          ruff check . --output-format=github

      - name: Run Ruff formatting check
        shell: bash -l {0}
        run: |
          conda activate ${{ env.CONDA_ENV }}
          echo "🔍 格式检查 (Ruff)"
          ruff format --check .

  # 完整测试 - Windows GUI 测试
  full-test:
    name: Full Test Suite (Windows)
    runs-on: windows-latest
    needs: quick-check
    timeout-minutes: 45

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Miniconda
        uses: conda-incubator/setup-miniconda@v3
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          environment-file: environment.yml
          activate-environment: ${{ env.CONDA_ENV }}
          auto-activate-base: false

      - name: Cache Conda dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/conda_pkgs_dir
            ~/.cache/pip
          key: ${{ runner.os }}-conda-${{ env.CACHE_VERSION }}-${{ hashFiles('environment.yml', '**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-conda-${{ env.CACHE_VERSION }}-
            ${{ runner.os }}-conda-

      - name: Install Python dependencies
        shell: bash -l {0}
        run: |
          conda activate ${{ env.CONDA_ENV }}
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Run tests with coverage
        shell: bash -l {0}
        run: |
          conda activate ${{ env.CONDA_ENV }}
          echo "🧪 运行测试套件 (Windows 原生)"

          # Windows 环境下运行测试 (无需虚拟显示器)
          pytest \
            --cov=bluev \
            --cov-report=xml \
            --cov-report=html \
            --cov-report=term-missing \
            --junit-xml=pytest-results.xml \
            -v

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        if: always()
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: |
            pytest-results.xml
            htmlcov/
            coverage.xml

  # 类型检查
  type-check:
    name: Type Check (mypy - Windows)
    runs-on: windows-latest
    needs: quick-check
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Miniconda
        uses: conda-incubator/setup-miniconda@v3
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          environment-file: environment.yml
          activate-environment: ${{ env.CONDA_ENV }}
          auto-activate-base: false

      - name: Install dependencies
        shell: bash -l {0}
        run: |
          conda activate ${{ env.CONDA_ENV }}
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Run mypy type checking
        shell: bash -l {0}
        run: |
          conda activate ${{ env.CONDA_ENV }}
          echo "🔍 类型检查 (mypy)"
          mypy bluev/ --show-error-codes --pretty

  # 安全扫描
  security-scan:
    name: Security Scan (Windows)
    runs-on: windows-latest
    timeout-minutes: 15

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install bandit
        run: |
          python -m pip install --upgrade pip
          pip install bandit[toml]

      - name: Run security scan
        run: |
          echo "🔒 安全扫描 (bandit)"
          bandit -r bluev/ -f json -o bandit-report.json || true
          bandit -r bluev/ -f txt

      - name: Upload security scan results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: security-scan-results
          path: bandit-report.json

  # 兼容性测试 - 定期运行 (Windows)
  compatibility-test:
    name: Compatibility Test (Python ${{ matrix.python-version }} - Windows)
    runs-on: windows-latest
    if: github.event_name == 'schedule' || github.event_name == 'workflow_dispatch'
    timeout-minutes: 30

    strategy:
      fail-fast: false
      matrix:
        python-version: ['3.10', '3.11', '3.12']

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Run basic tests
        run: |
          echo "🧪 运行基础测试 (Windows 兼容性)"
          pytest tests/ -v --tb=short
