name: Compatibility Test

on:
  schedule:
    # 每周日凌晨 2 点运行
    - cron: '0 2 * * 0'
  workflow_dispatch:
    inputs:
      python-versions:
        description: 'Python versions to test (comma-separated)'
        required: false
        default: '3.9,3.10,3.11,3.12'

env:
  CACHE_VERSION: 'v1'

jobs:
  compatibility-matrix:
    name: Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30

    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12']
        exclude:
          # 排除一些不必要的组合以节省资源
          - os: macos-latest
            python-version: '3.9'
          - os: windows-latest
            python-version: '3.9'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/pip
            ~/AppData/Local/pip/Cache
            ~/Library/Caches/pip
          key: ${{ runner.os }}-pip-${{ env.CACHE_VERSION }}-${{ matrix.python-version }}-${{ hashFiles('**/pyproject.toml') }}
          restore-keys: |
            ${{ runner.os }}-pip-${{ env.CACHE_VERSION }}-${{ matrix.python-version }}-
            ${{ runner.os }}-pip-${{ env.CACHE_VERSION }}-

      - name: Install system dependencies (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y \
            qt6-base-dev \
            libgl1-mesa-dev \
            libopencv-dev \
            python3-opencv \
            libjpeg-dev \
            libpng-dev \
            libtiff-dev \
            xvfb \
            libxkbcommon-x11-0

      - name: Install system dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install qt6 opencv

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"

      - name: Verify installation
        run: |
          python --version
          python -c "import sys; print(f'Python: {sys.version}')"
          python -c "import PySide6; print(f'PySide6: {PySide6.__version__}')"
          python -c "import cv2; print(f'OpenCV: {cv2.__version__}')"
          python -c "import numpy; print(f'NumPy: {numpy.__version__}')"

      - name: Run basic tests (Linux)
        if: runner.os == 'Linux'
        run: |
          export DISPLAY=:99
          Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
          sleep 3
          pytest tests/ -v --tb=short -x

      - name: Run basic tests (Windows/macOS)
        if: runner.os != 'Linux'
        run: |
          pytest tests/ -v --tb=short -x

  compatibility-report:
    name: Compatibility Report
    runs-on: ubuntu-latest
    needs: compatibility-matrix
    if: always()

    steps:
      - name: Generate compatibility report
        run: |
          echo "## 🔍 兼容性测试报告" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "测试时间: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ "${{ needs.compatibility-matrix.result }}" == "success" ]; then
            echo "✅ 所有兼容性测试通过" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ 部分兼容性测试失败，请检查详细日志" >> $GITHUB_STEP_SUMMARY
          fi

          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 测试矩阵" >> $GITHUB_STEP_SUMMARY
          echo "- **操作系统**: Ubuntu, Windows, macOS" >> $GITHUB_STEP_SUMMARY
          echo "- **Python 版本**: 3.9, 3.10, 3.11, 3.12" >> $GITHUB_STEP_SUMMARY
          echo "- **核心依赖**: PySide6, OpenCV, NumPy" >> $GITHUB_STEP_SUMMARY
